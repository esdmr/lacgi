\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{cgi}

\ExplSyntaxOn

\cs_new:Npn \g_cgi_env:Nn #1 #2 {
	\sys_get_shell:nnN { kpsewhich ~ --var-value ~ #2 } {
		\char_set_catcode_space:N \ %
	} \l_tmpa_tl
	\tl_trim_spaces:N \l_tmpa_tl
	\str_const:Nx #1 {\l_tmpa_tl}
}

\g_cgi_env:Nn \c_cgi_path_info_str {PATH_INFO}
\str_set:Nx \c_cgi_path_info_str {\str_tail:N \c_cgi_path_info_str}
\seq_new:N \g_cgi_path_info_seq

\regex_split:nxN {/} {\str_use:N \c_cgi_path_info_str} \g_cgi_path_info_seq

\prg_new_conditional:Npnn \cgi_if_path:n #1 { TF, T, F } {
	\seq_get_left:NN \g_cgi_path_info_seq \l_tmpa_tl
	\str_set:Nx \l_tmpa_str {\tl_to_str:N \l_tmpa_tl}
	\str_set:Nx \l_tmpb_str {#1}

	\str_if_eq:NNTF \l_tmpa_str \l_tmpb_str {
		\prg_return_true:
	} {
		\prg_return_false:
	}
}

\cs_new:Npn \cgi_pop_path:n #1 {
	{
			\seq_pop_left:NN \g_cgi_path_info_seq \l_tmpa_tl
			#1
		}
}

\iow_new:N \g_cgi_header_iow
\iow_open:Nn \g_cgi_header_iow {\c_sys_jobname_str.cgi-header}

\seq_new:N \g_cgi_headers_seq

\cs_new:Npn \cgi_header:nn #1 #2 {
	\str_if_exist:cF {g__cgi_header__#1_str} {
		\str_new:c {g__cgi_header__#1_str}
		\seq_push:Nn \g_cgi_headers_seq {#1}
	}

	\str_set:cn {g__cgi_header__#1_str} {#2}
}

\cs_generate_variant:Nn \cgi_header:nn {nx}
\cs_generate_variant:Nn \cgi_header:nn {xn}
\cs_generate_variant:Nn \cgi_header:nn {xx}

\cs_new:Nn \cgi_header_write: {
	\seq_map_inline:Nn \g_cgi_headers_seq {
		\iow_now:Nx \g_cgi_header_iow {##1:~\str_use:c {g__cgi_header__##1_str}}
	}

	\iow_close:N \g_cgi_header_iow
}

\cs_new:Npn \cgi_header_alias:Nn #1 #2 {
	\def #1 ##1 {
		\cgi_header:nn {#2} {##1}
	}
}

\g_cgi_env:Nn \c_cgi_http_cookie_str {HTTP_COOKIE}
\prop_new:N \g_cgi_http_cookie_prop

\regex_split:nxN {;} {\c_cgi_http_cookie_str} \l_tmpa_seq
\seq_map_inline:Nn \l_tmpa_seq {
	\regex_split:nnN {=} {#1} \l_tmpb_seq
	\tl_set:Nx \l_tmpa_tl {\seq_item:Nn \l_tmpb_seq {1}}
	\tl_trim_spaces:N \l_tmpa_tl
	\tl_set:Nx \l_tmpb_tl {\seq_item:Nn \l_tmpb_seq {2}}
	\tl_trim_spaces:N \l_tmpb_tl
	\prop_put:Nxx \g_cgi_http_cookie_prop {\l_tmpa_tl} {\l_tmpb_tl}
}

\cs_new:Npn \__cgi_token_to_codepoint:n #1 {
	\int_eval:n{`#1} % '}
}

\cs_new:Npn \__cgi_cookie_escape:NN #1 #2 {
	\str_clear:N #1
	\str_map_inline:Nn #2 {
		\int_set:Nn \l_tmpa_int {\__cgi_token_to_codepoint:n {##1}}
		\bool_lazy_any:nTF{
				{\bool_lazy_and_p:nn
					{\int_compare_p:nNn {\l_tmpa_int} > {34}}
					{\int_compare_p:nNn {\l_tmpa_int} < {44}}
				}
				{\bool_lazy_and_p:nn
					{\int_compare_p:nNn {\l_tmpa_int} > {44}}
					{\int_compare_p:nNn {\l_tmpa_int} < {59}}
				}
				{\bool_lazy_and_p:nn
					{\int_compare_p:nNn {\l_tmpa_int} > {59}}
					{\int_compare_p:nNn {\l_tmpa_int} < {92}}
				}
				{\bool_lazy_and_p:nn
					{\int_compare_p:nNn {\l_tmpa_int} > {92}}
					{\int_compare_p:nNn {\l_tmpa_int} < {127}}
				}
		}{
			\str_put_right:Nn #1 {##1}
		}{
			\str_put_right:Nx #1 {!\int_use:N\l_tmpa_int!}
		}
	}
}

\cs_new:Npn \__cgi_cookie_unescape_x:w ! #1 ! \q_stop {
	\str_put_right:Nx \l_tmpa_str {\char_generate:nn{#1}{12}}
}

\cs_new:Npn \__cgi_cookie_unescape_c:w #1 \q_stop {
	\str_put_right:Nn \l_tmpa_str {#1}
}

\cs_new:Npn \__cgi_cookie_unescape:w {
	\peek_charcode:NTF ! {\__cgi_cookie_unescape_x:w} {\__cgi_cookie_unescape_c:w}
}

\cs_new:Npn \__cgi_cookie_unescape:N #1 {
	\str_clear:N \l_tmpa_str
	\regex_extract_all:nxN{[^!]+|!\d+!}{#1}\l_tmpa_seq
	\seq_map_inline:Nn \l_tmpa_seq {
		\__cgi_cookie_unescape:w ##1 \q_stop
	}
	\str_set_eq:NN #1 \l_tmpa_str
}

\cs_new:Npn \cgi_get_cookie:Nn #1 #2 {
	\str_set:Nx #1 {\prop_item:Nn \g_cgi_http_cookie_prop {#2}}
	\__cgi_cookie_unescape:N #1
}

\cs_new:Npn \cgi_set_cookie:nN #1 #2 {
	\__cgi_cookie_escape:NN \l_tmpa_str #2
	% Since LaCGI is for personal use only, cookies need not be secure.
	\cgi_header:nx {Set-Cookie} {#1 = \l_tmpa_str; SameSite=Strict; HttpOnly}
}

\iow_new:N \g_cgi_body_iow
\iow_open:Nn \g_cgi_body_iow {\c_sys_jobname_str.cgi-body}

\cs_new:Npn \cgi_body:n #1 {
	\iow_now:Nn \g_cgi_body_iow {#1}
}

\cs_generate_variant:Nn \cgi_body:n {x}

\let \cgiHeader = \cgi_header:nn
\let \cgiHeaderX = \cgi_header:xx
\let \cgiHeaderNX = \cgi_header:nx
\let \cgiHeaderXN = \cgi_header:xn
\let \cgiHeaderWrite = \cgi_header_write:
\let \cgiBody = \cgi_body:n
\let \cgiBodyX = \cgi_body:x
\let \cgiIfPath = \cgi_if_path:nT
\let \cgiPopPath = \cgi_pop_path:n
\let \cgiGetCookie = \cgi_get_cookie:Nn
\let \cgiSetCookie = \cgi_set_cookie:nN
\let \strNew = \str_new:N
\let \strUse = \str_use:N
\let \strSet = \str_set:Nn
\cgi_header_alias:Nn \cgiContentType {Content-Type}
\cgi_header_alias:Nn \cgiStatus {Status}

\def \cgiPathInfo {
	\seq_use:Nn \g_cgi_path_info_seq {/}
}

\ExplSyntaxOff

\def \cgiEnd {
	\cgiHeaderWrite
	\begin{document}
	~
	\end{document}
	\endinput
}
